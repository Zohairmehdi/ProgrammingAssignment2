library(MASS)
makecacheMarix<- function(x= matrix()){
inv<- NULL       ##initializing inverse as NULL
set<-function((y)){
traceback()
library(MASS)
makeCacheMarix<- function(x= matrix()){
inv<- NULL       ##initializing inverse as NULL
set<- function((y)){
makeCacheMatrix <- function(x = matrix()) {
## This function creates a special "matrix" object that can cache its inverse
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) ## gets cache data
{
inv <- x$getinverse()
if(!is.null(inv)) {     ## checking wether inverse is NULL
message("getting cached data")
return(inv)          ## returns inverse value
}
data <- x$get()
inv <- solve(data, ...)   ## calculates inverse value
x$setinverse(inv)
inv  ## return a matrix that is the inverse of 'x'
}
f<- makeCacheMatrix(matrix(1:8,2, 4))
f$get()
f$setinverse()
f$getinverse()
cacheSolve(f)
y<- 2
f$getinverse()
cacheSolve(f)
f<- makeCacheMatrix(matrix(1:4, 2, 2))
f$get()
f$getinverse()
f$setinverse()
f$setinverse(2)
f$getinverse()
cacheSolve()
cacheSolve(f)
